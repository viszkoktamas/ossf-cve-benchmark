/**
 * This is the my-tool driver for the CVE Benchmarker.
 * See ../README.md for how to use this driver.
 *
 * This driver is the reference driver for the CVE Benchmarker.
 */

import * as path from "path";
import {
    Analyze,
    AnalyzeParams,
    drive,
    execFileSyncWithImprovedExceptionMessage,
    getDriverCommandlineInputs,
    simpleSpawn
} from "../../../../src/driver";
import {
    BCVE,
    BCVEAlert,
    BCVEResultStatus,
    Dir,
    DriverConfig,
    File,
    RuleID
} from "../../../../src/persistent-types";
import {readJSONFile} from "../../../../src/util";

function main() {
    let {toolID, config} = getDriverCommandlineInputs();
    let driverConfig: DriverConfig<{ ['my-toolDir']: string }> = config.tools[toolID];
    let analyzer = makeAnalyzeFunction(
        driverConfig.options["my-toolDir"]
    );

    drive(analyzer)
        .then(() => process.exit(0))
        .catch(e => {
            console.error(e);
            process.exit(1);
        });
}

main();

/**
 * @param myToolDir The directory where `my-tool` is located.
 * @return The analyze function that the driver invokes for each CVE
 */
function makeAnalyzeFunction(myToolDir: Dir): Analyze {
    return async function ({
                               bcve,
                               commitDescription,
                               tmp,
                               setReproduction,
                               setAlerts,
                               setStatus
                           }: AnalyzeParams) {
        // STEP 1: preparations for the run
        let myTool = path.join(myToolDir, "my-tool.js");
        // avoid relying on the `#!/usr/bin/env node` of my-tool.js: explicitly reuse the parent `node` executable
        let node = process.argv[0];
        // check if `my-tool` works as expected
        execFileSyncWithImprovedExceptionMessage(node, [myTool, "--help"]);

        let outputFile: File = path.join(tmp, "output.json");
        let weaknessFiles = (bcve.prePatch.weaknesses || []).map(w => path.join(commitDescription.localSourceDirectory, w.location.file));
        let uniqueWeaknessFiles = new Set(weaknessFiles);
        let paths = [...uniqueWeaknessFiles];

        let args: string[] = [myTool, "--output-file", outputFile, paths.join(' ')];

        setReproduction(`# navigate to project
cd ${tmp}
# run my-tool
${node} ${args.join(" ")}`);

        // STEP 2: run my-tool
        try {
            await simpleSpawn(node, args, tmp, 999999999, setStatus);
        } catch (e) {
            if (e.code !== 1) {
                throw e;
            }
            // ignore exit code -1: it simply means that some rules matched
        }

        // STEP 3: process the my-tool outputs
        setAlerts(
            convertMyToolOutputToAlerts(
                bcve,
                outputFile,
                commitDescription.localSourceDirectory
            )
        );
        setStatus(BCVEResultStatus.SUCCESS);
    };
}

/**
 * Converts the my-tool rule violations in an output file to an array of alerts.
 *
 * @param bcve BCVE description
 * @param myToolOutputFile the output from a my-tool run (format: JSON)
 * @param localSourceDirectory the directory to make absolute violation locations relative to
 */
function convertMyToolOutputToAlerts(
    bcve: BCVE,
    myToolOutputFile: File,
    localSourceDirectory: Dir
): BCVEAlert[] {
    /*
      my-tool outputs a json array with an array of rule violations per file:

      ```
      [ ...
        { "filePath": "/tmp/foo.js",
          "messages": [ ... { "functionBody": "func...", "startLine": 42, "endLine": 57, "vulnerable": 1 } ... ]
        }
        ... ]
    */
    type MyToolMessage = { functionBody: RuleID; vulnerable: number; startLine: number; endLine: number };
    type MyToolFileOutput = { filePath: File; messages: MyToolMessage[] };
    let myToolOutput: MyToolFileOutput[] = readJSONFile(myToolOutputFile);
    return myToolOutput.flatMap((f: MyToolFileOutput): BCVEAlert[] =>
        f.messages
            .filter(m => !!m.vulnerable /* parsing error */)
            .map(m => ({
                ruleID: `alert-for-${bcve.CVE}`,
                location: {
                    file: path.relative(localSourceDirectory, f.filePath),
                    lineStart: m.startLine,
                    lineEnd: m.endLine,
                }
            }))
    );
}
