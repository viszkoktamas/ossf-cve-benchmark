import * as path from "path";
import {
    AnalyzeParams,
    drive,
    execFileSyncWithImprovedExceptionMessage,
    getDriverCommandlineInputs,
    simpleSpawn
} from "../../../../src/driver";
import { BCVEResultStatus, Dir, File } from "../../../../src/persistent-types";
import { convertSarifLogToAlerts, readJSONFile } from "../../../../src/util";

/**
 * @param devskimDir The directory `<dir>` of `pip3 install -t <dir> devskim ...`.
 * @param timeout The number of milliseconds the analysis can run before it's forced to stop.
 */
function analyzeWithDriver(devskimDir: Dir, timeout: number): Promise<void> {
    async function analyze({
                               commitDescription,
                               tmp,
                               setReproduction,
                               setAlerts,
                               setStatus
                           }: AnalyzeParams) {
        // STEP 1: preparations for the run
        let devskim = path.join(devskimDir, "devskim");

        // check if `devskim` works as expected
        execFileSyncWithImprovedExceptionMessage(devskim, ["--help"], {stdio : 'ignore' });

        let sarifFile: File = path.join(tmp, "results.sarif");
        let args: string[] = [
            "analyze",
            "-g",
            "**/.git/**,**/bin/**,**/dist/**,**/node_modules/**,**/test/**,**/*.json,**/*.min.js",
            "-I",
            commitDescription.localSourceDirectory,
            "-O",
            sarifFile
        ];

        let reproduction = [
            `cd ${tmp}`,
            `${devskim} ${args.join(" ")}`
        ].join(" &&\n ");
        setReproduction(reproduction);

        // STEP 2: run devskim
        await simpleSpawn(devskim, args, tmp, timeout, setStatus);

        // STEP 3: process the devskim outputs
        let alerts = convertSarifLogToAlerts(readJSONFile(sarifFile));
        setAlerts(alerts);
        setStatus(BCVEResultStatus.SUCCESS);
    }
    return drive(analyze);
}

let { toolID, config } = getDriverCommandlineInputs();
analyzeWithDriver(
    config.tools[toolID].options.devskimDir,
    config.tools[toolID].timeout
)
    .then(() => process.exit(0))
    .catch(e => {
        console.error(e);
        process.exit(1);
    });
