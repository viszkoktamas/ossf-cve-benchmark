FROM python:3.8-slim-buster AS base

ARG tools
ENV tools="${tools}"

ARG cves
ENV cves="${cves}"

RUN apt-get update

RUN apt-get install -y curl software-properties-common && \
    curl -sL https://deb.nodesource.com/setup_20.x | bash - && \
    apt-get install -y nodejs

RUN apt-get install -y unzip

# Install jq
RUN apt-get install -y wget
RUN wget https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 && \
    mv jq-linux64 /usr/local/bin/jq && \
    chmod +x /usr/local/bin/jq

# clear cache
RUN rm -rf /var/lib/apt/lists/*

# Set working directory for all build stages.
WORKDIR /usr/src/app

################################################################################
# Create a stage for installing production dependecies.
FROM base AS deps

# Download dependencies as a separate step to take advantage of Docker's caching.
# Leverage bind mounts to package.json and package-lock.json to avoid having to copy them
# into this layer.
RUN --mount=type=bind,source=package.json,target=package.json \
    --mount=type=bind,source=package-lock.json,target=package-lock.json \
    npm ci --omit=dev

################################################################################
# Create a stage for building the application.
FROM deps AS build

# Download additional development dependencies before building, as some projects require
# "devDependencies" to be installed to build. If you don't need this, remove this step.
RUN --mount=type=bind,source=package.json,target=package.json \
    --mount=type=bind,source=package-lock.json,target=package-lock.json \
    npm ci

# Copy the rest of the source files into the image.
COPY . .

# Run the build script.
RUN npm run build

# Install the tools
RUN sed -i 's/\r$//' ./docker_scripts/generate_config.sh
RUN mkdir -p /usr/src/app/analyzers
RUN --mount=type=cache,target=/usr/src/app/analyzers_cache ./docker_scripts/generate_config.sh "$tools"

RUN sed -i 's/\r$//' ./docker_scripts/set_env_vars.sh
RUN ./docker_scripts/set_env_vars.sh  "$tools" "$cves"

################################################################################
# Create a new stage to run the application with minimal runtime dependencies
# where the necessary files are copied from the build stage.
FROM base AS final

# Use production node environment by default.
ENV NODE_ENV=production

# Copy package.json so that package manager commands can be used.
COPY package.json .

COPY docker_scripts/start.sh ./start.sh
RUN sed -i 's/\r$//' ./start.sh
COPY bin bin
COPY index.js index.js
COPY schemas schemas
COPY CVEs CVEs

# Copy the production dependencies from the deps stage and also
# the built application from the build stage into the image.
COPY --from=deps /usr/src/app/node_modules ./node_modules
COPY --from=build /usr/src/app/build ./build
COPY --from=build /usr/src/app/analyzers ./analyzers
COPY --from=build /usr/src/app/config.json ./config.json
COPY --from=build /usr/local/lib/python3.8/site-packages /usr/local/lib/python3.8/site-packages
COPY --from=build /.env /.env

# Run the analysis.
CMD ["./start.sh", "run"]
