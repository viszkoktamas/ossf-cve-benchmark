#!/bin/bash

ROOT_DIR="/usr/src/app"
ANALYZERS_DIR="${ROOT_DIR}/analyzers"
TOOLS_DIR="${ROOT_DIR}/contrib/tools"
BUILT_TOOLS_DIR="${ROOT_DIR}/build/ts/contrib/tools"
ANALYZERS_CACHE="${ROOT_DIR}/analyzers_cache"

# Define the base structure of the config.json file
echo '{
  "tools": {
  }
}' > config.json

# Check if the tools parameter is set and add the corresponding tool configurations
if [ -n "$1" ]; then
  IFS=';' read -ra ADDR <<< "$1"
  for i in "${ADDR[@]}"; do
    # Check if the tool is already installed
    if [ ! -d "${ANALYZERS_CACHE}/${i}" ]; then
      # Remove the carriage return character from the install.sh file to fix runtime error on Windows
      sed -i 's/\r$//' ${TOOLS_DIR}/${i}/installers/install.sh
      # logging
      echo "Installing the tool ${i}"
      # Install the tool
      ${TOOLS_DIR}/${i}/installers/install.sh ${ANALYZERS_CACHE}/${i}
    else
      echo "The tool ${i} is already installed"
    fi
    # Copy the tool from cache to the analyzers directory
    cp -r ${ANALYZERS_CACHE}/${i} ${ANALYZERS_DIR}/${i}
    # Add the tool configuration to the config.json file
    jq '.tools += {
      "'${i}'": {
        "bin": "node",
        "args": ["'${BUILT_TOOLS_DIR}'/'$i'/src/'${i}'.js"],
        "options": {"'${i}'Dir": "'${ANALYZERS_DIR}'/'${i}'"}
      }
    }' config.json > tmp.json && mv tmp.json config.json
  done
else
  echo "No tools parameter provided"
fi

# Add the default tool to the config.json file
jq '.tools += {"ideal-analysis": {"bin": "node", "args": ["'${BUILT_TOOLS_DIR}'/ideal-analysis/src/ideal-analysis.js"]}}' config.json > tmp.json && mv tmp.json config.json